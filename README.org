* EpiClust
scmodule code [[https://github.com/KellisLab/scmodule][adapted]] for ATAC-seq, multiomics, and peak-gene linking

** To install
You may need to create a CONDA environment as specified in [[epiclust.yml]].

After dependencies are met, this sequence of commands installs the library.
#+BEGIN_SRC bash
git clone git@github.com:KellisLab/epiclust.git
cd epiclust
python3 setup.py build && pip install .
#+END_SRC
** Preprocessing
Make sure your peaks are in an AnnData (H5AD) file.

Using a Gene accessiblity matrix (e.g. as estimated by [[https://www.archrproject.com/bookdown/calculating-gene-scores-in-archr.html][ArchR]]) helps aggregate nearby peaks better than by alone.
This helps even with multiomic ATAC+GEX: use pseudo triple-omic (Peaks, Gene Accessiblity, Gene Expression)
So, for combining these:
#+BEGIN_SRC python
from sklearn.feature_extraction.text import TfidfTransformer
import anndata
import scanpy as sc
### Use TF-IDF (non-logTF) on peak matrix
peaks.X = TfidfTransformer().fit_transform(peaks.X)
### Normalize peak matrix to 10000 counts per cell to facilitate integration with gene accessibility
sc.pp.normalize_total(peaks, target_sum=10000)
### Normalize gene accessibility to 10000 counts per cell
sc.pp.normalize_total(gacc, target_sum=10000)
### Normalize gene expression (if multi-omic GEX+ATAC) to 10000 counts per cell
sc.pp.normalize_total(gexp, target_sum=10000)
### Concatenate modalities
adata = anndata.concat({"Gene Accessibility": gacc,
                        "Peaks": peaks,
                        "Gene Expression": gexp},
                       axis=1, label="feature_types", merge="same")
### Log-scale
sc.pp.log1p(adata)
### Calculate QC metrics
sc.pp.calculate_qc_metrics(adata, inplace=True, percent_top=[])
### PCA
sc.pp.pca(adata, n_comps=100)
#+END_SRC
** multi-omic workflow (RECOMMENDED)
Note that the n_neighbors parameter can be changed, as n_neighbors is the per-batch number of neighbors
#+BEGIN_SRC python
import epiclust as ec
for power in np.linspace(0, 1, 5):
	print("Calculating power:", power)
	ec.extract_rep(adata, power=power, margin="log1p_total_counts")
	ec.fit(adata, batch="feature_types")
	ec.neighbors(adata, key_added="pow_%.2f" % power, n_neighbors=25) ### takes forever but worth it

vidx = ec.filter_varp(adata, ["pow_%.2f" % power for power in np.linspace(0, 1, 5)])
adata = adata[:, vidx].copy()
ec.leiden(adata, ["pow_%.2f" % power for power in np.linspace(0, 1, 5)], resolution=1., max_comm_size=2500)
#+END_SRC
** single-omic workflow (DEPRECATED)
#+BEGIN_SRC python
import epiclust as ec
for power in np.linspace(0, 1, 5):
	print("Calculating power:", power)
	ec.extract_rep(adata, power=power, margin="log1p_total_counts")
	ec.fit(adata)
	ec.neighbors(adata, key_added="pow_%.2f" % power)

vidx = ec.filter_varp(adata, ["pow_%.2f" % power for power in np.linspace(0, 1, 5)])
adata = adata[:, vidx].copy()
ec.leiden(adata, ["pow_%.2f" % power for power in np.linspace(0, 1, 5)], resolution=1., max_comm_size=2500)
#+END_SRC
